lda.pred
data.frame(lda.pred)[1:5,]
lda.pred[1]
len(lda.pred[1])
dim(lda.pred[1])
length(lda.pred[1])
testThis <- (lda.pred[1])
class(testThis)
lda.pred[2]
lda.pred[3]
lda.pred[4]
lda.pred[5]
lda.pred[0]
lda.pred[1]
data.frame(lda.pred)[1:5,]
names(lda.pred)
lda.pred$class
length(lda.pred$class)
Smarket.2005$Direction
length(Smarket.2005$Direction)
table(Smarket.2005, lda.pred$class)
table(Smarket.2005$Direction, lda.pred$class)
table(Smarket.2005$Direction, lda.pred$class)
Smarket.2005$Direction == lda.pred$class
mean(Smarket.2005$Direction == lda.pred$class)
library(class)
train
class(train)
length(train)
Lag1
?cbind
train[,1:10]
train.X <- cbind(Lag1, Lag2)[train,]
train <-(Smarket$Year <2005)
train
attach(Smarket)
train < (Year < 2005)
train
train=(Year<2005)
train.X <- cbind(Lag1, Lag2)[train,]
head(train.X)
Lag1
length(Lag1)
length(Smarket)
dim(Smarket)
dim(train.X)
head(train)
length(train)
search()
library(class)
train.X=cbind(Lag1,Lag2)[train,]
test.X=cbind(Lag1,Lag2)[!train,]
train.Direction=Direction[train]
train.X
dim(train.X)
dim(test.X)
252 + 998
Direction
class(Direction)
Direction[train]
dim(train.X)
dim(test.X)
998+252
class(train)
train
length(train)
Lag1
class(Lag1)
dim(train.Direction)
train.Direction
length(train.Direction)
test <- cbind(Lag1, Lag2)
class(test)
set.seed(1)
knn.pred=knn(train.X, test.X, train.Direction, k=1)
table(knn.pred, Direction.2005)
rm(list=ls(all=TRUE))
dim(Caravan)
attach(Caravan)
summary(Caravan$Purchase)
standardized.X <- scale(Caravan[, -86])
head(Caravan$Purchase)
test < 1:1000
test <- 1:1000
train.X <- standardized.X[-test,]
test.X <- standardized.X[test,]
train.Y <- Purchase[-test]
test.Y <- Purchase[test]
set.seed(1)
knn.pred <- knn(train.X, test.X, train.Y, k=1)
knn.pred
dim(test.X)
dim(train.X)
test.Y
dim(knn.pred)
class(knn.pred)
length(knn.pred)
test.Y
summary(test.Y)
mark <- test.Y != knn.pred
summary(mark)
table(test.Y, knn.pred)
873 + 50
table(knn.pred, test.Y)
873 + 50
68 + 9
923 + 77
873 + 68
getwd
getwd()
setwd('Users/zurich/Documents/TEMP-FILES/TS-temp')
setwd('/Users/zurich/Documents/TEMP-FILES/TS-temp/time-series-visualisation')
dir()
source('~/.active-rstudio-document', echo=TRUE)
data <- read.csv("Alljob.csv")
data
summary(data)
rm(list=ls())
data <- read.csv("Alljob.csv")
str(data)
?data
?str
data$RealDate <- as.character(data$RealDate)
str(data)
date <- as.Date(data$RealDate, format = "%d.%m.%y")
df <-data.frame(date = date, jobs = data$Jobs, holiday = data$Holiday)
head(df)
str(df)
?format
df2012 <- subset(df, as.numeric(format(df$date, "%Y")) == 2012)
df2013 <- subset(df, as.numeric(format(df$date, "%Y")) == 2013)
df2014 <- subset(df, as.numeric(format(df$date, "%Y")) == 2014)
df2012
dim(df2012)
dim(df2013)
dim(df2014)
strptime(df2012$date,  "%Y-%m-%d")
strptime(df2012$date,  "%Y-%m-%d")$wday
?strptime
test <-  strptime(df2012$date,  "%Y-%m-%d")
class(test)
unique(tst)
unique(test)
str(test)
test$wday
unique(test$wday)
rm(list=ls())
library("classInt")
library("RCurl")
dfCurrent12 <- subset(df2012, strptime(df2012$date,  "%Y-%m-%d")$wday %in% c(1,2,3,4,5))
dfCurrent13 <- subset(df2013, strptime(df2013$date,  "%Y-%m-%d")$wday %in% c(1,2,3,4,5))
dfCurrent14 <- subset(df2014, strptime(df2014$date,  "%Y-%m-%d")$wday %in% c(1,2,3,4,5))
df2012 <- subset(df, as.numeric(format(df$date, "%Y")) == 2012)
df2013 <- subset(df, as.numeric(format(df$date, "%Y")) == 2013)
df2014 <- subset(df, as.numeric(format(df$date, "%Y")) == 2014)
dfCurrent12 <- subset(df2012, strptime(df2012$date,  "%Y-%m-%d")$wday %in% c(1,2,3,4,5))
dfCurrent13 <- subset(df2013, strptime(df2013$date,  "%Y-%m-%d")$wday %in% c(1,2,3,4,5))
dfCurrent14 <- subset(df2014, strptime(df2014$date,  "%Y-%m-%d")$wday %in% c(1,2,3,4,5))
df2012 <- subset(df, as.numeric(format(df$date, "%Y")) == 2012)
df2013 <- subset(df, as.numeric(format(df$date, "%Y")) == 2013)
df2014 <- subset(df, as.numeric(format(df$date, "%Y")) == 2014)
df <-data.frame(date = date, jobs = data$Jobs, holiday = data$Holiday)
rm(list=ls())
library("classInt")
library("RCurl")
data <- read.csv("Alljob.csv")
#Read Date was a factor, change it to a string
data$RealDate <- as.character(data$RealDate)
# define a vector called date
date <- as.Date(data$RealDate, format = "%d.%m.%y")
# contruct a data frame with all years
df <-data.frame(date = date, jobs = data$Jobs, holiday = data$Holiday)
df2012 <- subset(df, as.numeric(format(df$date, "%Y")) == 2012)
df2013 <- subset(df, as.numeric(format(df$date, "%Y")) == 2013)
df2014 <- subset(df, as.numeric(format(df$date, "%Y")) == 2014)
dfCurrent12 <- subset(df2012, strptime(df2012$date,  "%Y-%m-%d")$wday %in% c(1,2,3,4,5))
dfCurrent13 <- subset(df2013, strptime(df2013$date,  "%Y-%m-%d")$wday %in% c(1,2,3,4,5))
dfCurrent14 <- subset(df2014, strptime(df2014$date,  "%Y-%m-%d")$wday %in% c(1,2,3,4,5))
par(mfrow = c(3,1)
oma=c(0, 0, 0, 0)
mar=c(0, 0, 0, 0))
par(mfrow = c(3,1) ,oma=c(0, 0, 0, 0) ,mar=c(0, 0, 0, 0))
fnCalendarFlow(dfCurrent12)
fnCalendarFlow <- function(dfCurrent) {
#==============================================
span <- range(dfCurrent$jobs)[2] - range(dfCurrent$jobs)[1]
startDate <- strptime(min(dfCurrent$date), "%Y-%m-%d")
endDate <- strptime(max(dfCurrent$date), "%Y-%m-%d")
timespan <- difftime(endDate, startDate, units="weeks")
numweeks <- as.numeric(timespan, units="weeks") + 2
numObservations <- nrow(dfCurrent)
#blank plot
plot(0, 0, type="n", xlim=c(0, numweeks), ylim=c(0, 8), asp=1, xaxt='n', yaxt='n', ann=FALSE, bty="n")
# Helper function to find the last day of month in datestring
lastDayOfMonth <- function(datestring, date.form = "%Y-%m-%d") {
thedate <- strptime(datestring, date.form)
theyear <- thedate$year + 1900
themonth <- thedate$mon + 1
themonth.posix <- as.POSIXct(paste(theyear, themonth, '1', sep='-'), format=date.form)
month.next <- seq(themonth.posix, length=2, by='1 month')[2]
last.day <- seq(month.next, length=2, by='-1 day')[2]
return(strptime(last.day, date.form))
}
fnRemapDay <- function(intDayNum) {
#remap day number
if (intDayNum == 0) {intReturnNum = 0}
else if (intDayNum == 1 ) {intReturnNum = 6}
else if (intDayNum == 2 ) {intReturnNum = 5}
else if (intDayNum == 3 ) {intReturnNum = 4}
else if (intDayNum == 4 ) {intReturnNum = 3}
else if (intDayNum == 5 ) {intReturnNum = 2}
else if (intDayNum == 6 ) {intReturnNum = 1}
}
# colours
ncolors = 40
pal <- colorRampPalette(c("#FFFFFF", "#0000cc")) # blue
colorgrad <- pal(ncolors)
gridColor <- "white"
#ci <- classIntervals(dfNoWeekEND$jobs, n = ncolors, style = "quantile")
ci <- classIntervals(dfNoWeekEND$jobs, n = ncolors, style = "fisher")
fnReturnColor <- function(intJobNumber)  {
colorNumber <- findInterval(intJobNumber, ci$brks)
cellcolor <- colorgrad[colorNumber]
return(cellcolor)
}
for (i in 1:numObservations) {
if (dfCurrent$jobs[i] > 0) {
currDate <- strptime(dfCurrent$date[i], "%Y-%m-%d")
#wday ==> 0 for Sunday, 6 for Saturday
dayofweek <- fnRemapDay(currDate$wday)
diff <- difftime(currDate, startDate, units="weeks") + startDate$wday/6
weeknum <- ceiling( as.numeric(diff, units="weeks") )
cellcolor <- fnReturnColor(dfCurrent$jobs[i])
rect(weeknum, dayofweek, (weeknum+1), (dayofweek+1), col=cellcolor, border=NA)
}
}
# Draw calendar grid Grid of 7 x 52
for (i in 1:numweeks) {
#iterate between 1 and 52 Week 26  lines(26,26, 0, 7)
lines(c(i, i), c(2, 7), col=gridColor, lwd=.5)
}
for (j in 2:7) {
lines(c(1, numweeks), c(j, j), col=gridColor, lwd=0.5)
}
# Month lines
dateseq <- seq(startDate, endDate, by="1 month")
#vector of dates typically 12.  Start at the first day of the month
for (i in 1:(length(dateseq)-1)) {
#typically iterates 11 times
lastDay <- lastDayOfMonth(format(dateseq[i], "%Y-%m-%d"))
diff <- difftime(lastDay, startDate, units="weeks") + startDate$wday/6
weeknum <- ceiling( as.numeric(diff, units="weeks") )
#end of month on a sunday
dayofweek <- fnRemapDay(strptime(lastDay, "%Y-%m-%d")$wday)
if (dayofweek == 0 || dayofweek == 1) {
lines( c( (weeknum+1), (weeknum+1) ), c(2, 7), col=gridColor, lwd=3, lend=1)
}
else {
lines( c( (weeknum+1), (weeknum+1) ), c(2, (dayofweek)), col=gridColor, lwd=3, lend=1)
if (dayofweek != 2) {
lines(c( (weeknum+1), weeknum+2), c( (dayofweek), (dayofweek)), col=gridColor, lwd=3, lend=1)
}
lines(c(weeknum +2, weeknum +2), c((dayofweek), 7), col=gridColor, lwd=3, lend=1)
}
}
}
par(mfrow = c(3,1) ,oma=c(0, 0, 0, 0) ,mar=c(0, 0, 0, 0))
fnCalendarFlow(dfCurrent12)
dfNoWeekEND <-subset(df, strptime(df$date,  "%Y-%m-%d")$wday %in% c(1,2,3,4,5))
fnCalendarFlow(dfCurrent12)
fnCalendarFlow(dfCurrent13)
fnCalendarFlow(dfCurrent14)
par(mfrow = c(3,1) ,oma=c(0, 0, 0, 0) ,mar=c(0, 0, 0, 0))
fnCalendarFlow(dfCurrent12)
fnCalendarFlow(dfCurrent13)
fnCalendarFlow(dfCurrent14)
?par
par(mfrow = c(3,1)  , mar=c(0, 0, 0, 0))
fnCalendarFlow(dfCurrent12)
fnCalendarFlow(dfCurrent13)
fnCalendarFlow(dfCurrent14)
dfNoWeekEND
dim(dfNoWeekEND)
dim(dfCurrent12)
nrow(dfCurrent13)
nrow(dfCurrent14)
nrow(dfCurrent12)
nrow(dfCurrent13)
nrow(dfCurrent14)
261 * 3
dfNoWeekEND
strptime(df$date,  "%Y-%m-%d")$wday
strptime(df$date,  "%Y-%m-%d")$year
dfNoWeekEND <-subset(df, strptime(df$date,  "%Y-%m-%d")$wday %in% c(1,2,3,4,5))
dfNoWeekEND <-subset(df, strptime(df$date,  "%Y-%m-%d")$year %in% c(112,113,114))
#get rid of weekends
dfCurrent12 <- subset(df2012, strptime(df2012$date,  "%Y-%m-%d")$wday %in% c(1,2,3,4,5))
dfCurrent13 <- subset(df2013, strptime(df2013$date,  "%Y-%m-%d")$wday %in% c(1,2,3,4,5))
dfCurrent14 <- subset(df2014, strptime(df2014$date,  "%Y-%m-%d")$wday %in% c(1,2,3,4,5))
# mfrow c(nRows, nColumns)
# mar gives outer margins in the form of c(bottom, left, top, right)
par(mfrow = c(3,1)  , mar=c(0, 0, 0, 0))
fnCalendarFlow(dfCurrent12)
fnCalendarFlow(dfCurrent13)
fnCalendarFlow(dfCurrent14)
dfCurrent <- dfCurrent12
span <- range(dfCurrent$jobs)[2] - range(dfCurrent$jobs)[1]
dfCurrent$jobs[2]
dfCurrent$jobs[1]
head(dfCurrent$jobs)
range(dfCurrent$jobs)
max(dfCurrent$jobs)
startDate <- strptime(min(dfCurrent$date), "%Y-%m-%d")
startDate
span <- range(dfCurrent$jobs)[2] - range(dfCurrent$jobs)[1]
# get the earliest date for dfCurrent
startDate <- strptime(min(dfCurrent$date), "%Y-%m-%d")
# get the latest date for dfCurrent
endDate <- strptime(max(dfCurrent$date), "%Y-%m-%d")
timespan <- difftime(endDate, startDate, units="weeks")
timespan
?difftime
# for a whole year this will be 52 weeks
timespan <- difftime(endDate, startDate, units="weeks")
numweeks <- as.numeric(timespan, units="weeks") + 2
numObservations <- nrow(dfCurrent)
plot(0, 0, type="n", xlim=c(0, numweeks), ylim=c(0, 8), asp=1, xaxt='n', yaxt='n', ann=FALSE, bty="n")
date.form = "%Y-%m-%d"
head(dfCurrent)
datestring <- dfCurrent$date[1]
datestring
class(datestring)
datestring <- as.character(dfCurrent$date[1])
class(datestring)
thedate <- strptime(datestring, date.form)
class(thedate)
thedate$year
thedate$year + 1900
mm <- thedate$year + 1900
class(mm)
thedate$mon
thedate$mon
thedate
paste(theyear, themonth, '1', sep='-')
theyear <- thedate$year + 1900
paste(theyear, themonth, '1', sep='-')
themonth <- thedate$mon + 1
paste(theyear, themonth, '1', sep='-')
themonth.posix <- as.POSIXct(paste(theyear, themonth, '1', sep='-'), format=date.form)
themonth.posix
seq(themonth.posix, length=2, by='1 month')
month.next <- seq(themonth.posix, length=2, by='1 month')[2]
month.next
seq(month.next, length=2, by='-1 day')
last.day <- seq(month.next, length=2, by='-1 day')[2]
last.day
strptime(last.day, date.form)
class(last.day)
mm <-strptime(last.day, date.form)
class(mm)
pal <- colorRampPalette(c("#FFFFFF", "#0000cc")) # blue
ncolors = 40
pal
pp <- pal(40)
pp
?colorRampPalette
ci <- classIntervals(dfNoWeekEND$jobs, n = ncolors, style = "fisher")
class(ci)
str(ci)
ci$brks
length(ci$brks)
length(ci$brks)
ci$brks
ci$var
?findInterval
ci$brks
colorNumber <- findInterval(intJobNumber, ci$brks)
findInterval(40, ci$brks)
findInterval(50, ci$brks)
findInterval(50, ci$brks)
ci$brks[16]
findInterval(50.5, ci$brks)
findInterval(50.4, ci$brks)
currDate <- strptime(dfCurrent$date[100], "%Y-%m-%d")
currDate
startDate
difftime(currDate, startDate, units="weeks")
startDate$wday
startDate$wday /6
diff <- difftime(currDate, startDate, units="weeks") + startDate$wday/6
weeknum <- ceiling(as.numeric(diff, units="weeks") )
diff
weeknum
source('~/Documents/TEMP-FILES/TS-temp/time-series-visualisation/jobsCalendar.R', echo=TRUE)
setwd('/Users/zurich/Documents/TEMP-FILES/time-series-visualisation')
source('~/Documents/TEMP-FILES/time-series-visualisation/jobsCalendar.R', echo=TRUE)
rm(list=ls())
library(timeDate)
library(plyr)
library(ggplot2)
library("RCurl")
x <- getURL("https://raw.githubusercontent.com/thefactmachine/time-series-visualisation/master/Alljob.csv")
data <- read.csv(text = x)
data
names(data)
rm(list=ls())
library(timeDate)
library(plyr)
library(ggplot2)
library("RCurl")
x <- getURL("https://raw.githubusercontent.com/thefactmachine/time-series-visualisation/master/Alljob.csv")
data <- read.csv(text = x)
date <- as.Date(data$RealDate, format = "%d.%m.%y")
df <-data.frame(date = date, jobs = data$Jobs, holiday = data$Holiday)
df
#filter in Monday...Friday only
dfFiltered <- subset(df, strptime(date,  "%Y-%m-%d")$wday %in% c(1,2,3,4,5))
#filter out public holidays
dfFiltered <- subset(dfFiltered, holiday == FALSE)
#filter out zeros
dfFiltered <- subset(dfFiltered, jobs != 0)
dfFiltered
names(dfFiltered)
timeDate::timeDate(dfFiltered$date)
mm <- timeDate::timeDate(dfFiltered$date)
mm
head(mm)
class(mm)
filtered <- mm[1:20]
filtered
timeDate::dayOfYear(filtered)
timeDate::dayOfYear(filtered)[1]
timeDate::dayOfYear(filtered)[3]
rm(list=ls())
library(timeDate)
library(plyr)
library(ggplot2)
library("RCurl")
x <- getURL("https://raw.githubusercontent.com/thefactmachine/time-series-visualisation/master/Alljob.csv")
data <- read.csv(text = x)
date <- as.Date(data$RealDate, format = "%d.%m.%y")
df <-data.frame(date = date, jobs = data$Jobs, holiday = data$Holiday)
#Do some filtering
#filter in Monday...Friday only
dfFiltered <- subset(df, strptime(date,  "%Y-%m-%d")$wday %in% c(1,2,3,4,5))
#filter out public holidays
dfFiltered <- subset(dfFiltered, holiday == FALSE)
#filter out zeros
dfFiltered <- subset(dfFiltered, jobs != 0)
# Add WeekNumber: 1) convert to timeDate 2) convert to day of year (i.e. 1..365)
# 3) divide by 7 to get flowing week number 4) get celing to convert to integer
dfFiltered$weekNum <-ceiling(timeDate::dayOfYear(timeDate::timeDate(dfFiltered$date)) / 7)
# Add MonthNumber
dfFiltered$monthNum <- as.numeric(format(dfFiltered$date, "%m"))
# Add Year
dfFiltered$YearNum <- as.numeric(format(dfFiltered$date, "%Y"))
#Add Cum Month
dfFiltered$cumMonth <- ((dfFiltered$YearNum - 2012) * 12) + dfFiltered$monthNum
#Add Cum Year
dfFiltered$cumWeek <- ((dfFiltered$YearNum - 2012) * 52) + dfFiltered$weekNum
df2012 <- subset(dfFiltered, dfFiltered$YearNum == 2012)
df2013 <- subset(dfFiltered, dfFiltered$YearNum == 2013)
df2014 <- subset(dfFiltered, dfFiltered$YearNum == 2014)
dfCurrent <- df2014
dfAll <- dfFiltered
head(dfCurrent)
mm <- ddply(dfCurrent, "weekNum", summarise, meanJob=mean(jobs))
mm
head(dfAll)
nrow(dfAll)
nrow(dfCurrent)
mm <- ddply(dfCurrent, "weekNum", summarise, meanJob=mean(jobs))
all <- ddply(dfAll, "cumWeek", summarise, meanJob=mean(jobs))
head(all)
head(mm)
#add the scaled mean obtained globally to current year
mm$scaleMean <- (mm$meanJob - min)/ gap
gap <- range(all$meanJob)[2] - range(all$meanJob)[1]
min <- range(all$meanJob)[1]
#add the scaled mean obtained globally to current year
mm$scaleMean <- (mm$meanJob - min)/ gap
head(mm)
mean(mm$scaleMean)
p <- ggplot(mm, aes(x = factor(weekNum) , y = scaleMean * 4))
p
p <- p + geom_bar(stat = "identity", fill="#999999", colour="#999999")
p
p <- p + stat_smooth(se = FALSE, aes(group = 1), n=30, fill="red")
p
p <- p + coord_equal()
p
p <- p + theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())
p
source('~/Documents/TEMP-FILES/time-series-visualisation/jobsCalendar-MonthlySummary.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/TEMP-FILES/time-series-visualisation/jobsCalendar-BigPicture.R', echo=TRUE)
mm
head(mm)
